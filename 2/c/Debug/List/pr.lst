
AVRASM ver. 2.1.30  C:\Users\Administrator\Desktop\Last Prj\Debug\List\pr.asm Thu Jul 05 13:10:21 2018

C:\Users\Administrator\Desktop\Last Prj\Debug\List\pr.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Last Prj\Debug\List\pr.asm(1090): warning: Register r5 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Last Prj\Debug\List\pr.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Last Prj\Debug\List\pr.asm(1092): warning: Register r7 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Last Prj\Debug\List\pr.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Last Prj\Debug\List\pr.asm(1094): warning: Register r8 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Last Prj\Debug\List\pr.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Last Prj\Debug\List\pr.asm(1096): warning: Register r10 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Last Prj\Debug\List\pr.asm(1097): warning: Register r13 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Last Prj\Debug\List\pr.asm(1098): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega64
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega64
                 	#pragma AVRPART MEMORY PROG_FLASH 65536
                 	#pragma AVRPART MEMORY EEPROM 2048
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 	.DEF _j=R6
                 	.DEF _j_msb=R7
                 	.DEF _D=R9
                 	.DEF _V=R8
                 	.DEF _C=R11
                 	.DEF _asm=R10
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0062 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0091 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00004f 0001
000050 0000      	.DB  0x1,0x0,0x0,0x0
000051 1050
000052 0001      	.DB  0x50,0x10,0x1,0x0
                 
                 _0x3:
000053 6e6e
000054 6e6e
000055 6e6e
000056 6e6e      	.DB  0x6E,0x6E,0x6E,0x6E,0x6E,0x6E,0x6E,0x6E
                 _0x2000003:
000057 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000058 0008      	.DW  0x08
000059 0004      	.DW  0x04
00005a 009e      	.DW  __REG_VARS*2
                 
00005b 0008      	.DW  0x08
00005c 0500      	.DW  _data
00005d 00a6      	.DW  _0x3*2
                 
00005e 0002      	.DW  0x02
00005f 0508      	.DW  __base_y_G100
000060 00ae      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000061 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000062 94f8      	CLI
000063 27ee      	CLR  R30
000064 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000065 e0f1      	LDI  R31,1
000066 bff5      	OUT  MCUCR,R31
000067 bfe5      	OUT  MCUCR,R30
000068 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00006a e08d      	LDI  R24,(14-2)+1
00006b e0a2      	LDI  R26,2
00006c 27bb      	CLR  R27
                 __CLEAR_REG:
00006d 93ed      	ST   X+,R30
00006e 958a      	DEC  R24
00006f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000070 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000071 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000072 e0a0      	LDI  R26,LOW(__SRAM_START)
000073 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000074 93ed      	ST   X+,R30
000075 9701      	SBIW R24,1
000076 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000077 ebe0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000078 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000079 9185      	LPM  R24,Z+
00007a 9195      	LPM  R25,Z+
00007b 9700      	SBIW R24,0
00007c f061      	BREQ __GLOBAL_INI_END
00007d 91a5      	LPM  R26,Z+
00007e 91b5      	LPM  R27,Z+
00007f 9005      	LPM  R0,Z+
000080 9015      	LPM  R1,Z+
000081 01bf      	MOVW R22,R30
000082 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000083 9005      	LPM  R0,Z+
000084 920d      	ST   X+,R0
000085 9701      	SBIW R24,1
000086 f7e1      	BRNE __GLOBAL_INI_LOOP
000087 01fb      	MOVW R30,R22
000088 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000089 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008a bfed      	OUT  SPL,R30
00008b e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008d e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008e e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008f 940c 0229 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;//HOSSEIN___GHOLAMI 9321043
                 ;
                 ;//LIBRARIS
                 ;#include <mega64.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;//DEFENITIONS
                 ;#define ME1 PORTB.3   // EN OF MOTOR 1 (LEFT)
                 ;#define ME2 PORTB.2   //EN OF MOTOR 2 (RIGHT)
                 ;#define SR1 OCR1CL    //SPEED (PWM DUTY CYCLE) OF M1 ROTATING FORWARD
                 ;#define SL1 OCR1BL    //SPEED (PWM DUTY CYCLE) OF M1 ROTATING BACKWARD
                 ;#define SR2 OCR1AL    //SPEED (PWM DUTY CYCLE) OF M2 ROTATING FORWARD
                 ;#define SL2 OCR0      //SPEED (PWM DUTY CYCLE) OF M2 ROTATING BACKWARD
                 ;#define CB PORTB.0  //Config of bluetooth
                 ;
                 ; int i=1; // USE AS COUNTER
                 ; int j=0;
                 ;
                 ; char data[]={'n','n','n','n','n','n','n','n'}; // USE AS BUFFER
                 
                 	.DSEG
                 ;  unsigned char D = 0x10;
                 ;  unsigned char V = 0x50;
                 ;  unsigned char C = 0;
                 ;  unsigned char asm = 1;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 001D {  lcd_gotoxy(0,0);
                 
                 	.CSEG
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
000091 920a      	ST   -Y,R0
000092 921a      	ST   -Y,R1
000093 92fa      	ST   -Y,R15
000094 936a      	ST   -Y,R22
000095 937a      	ST   -Y,R23
000096 938a      	ST   -Y,R24
000097 939a      	ST   -Y,R25
000098 93aa      	ST   -Y,R26
000099 93ba      	ST   -Y,R27
00009a 93ea      	ST   -Y,R30
00009b 93fa      	ST   -Y,R31
00009c b7ef      	IN   R30,SREG
00009d 93ea      	ST   -Y,R30
00009e e0e0      	LDI  R30,LOW(0)
00009f 93ea      	ST   -Y,R30
0000a0 e0a0      	LDI  R26,LOW(0)
0000a1 940e 02cc 	CALL _lcd_gotoxy
                 ; 0000 001E    data[i]=UDR0;    //daryaft data
0000a3 01d2      	MOVW R26,R4
0000a4 50a0      	SUBI R26,LOW(-_data)
0000a5 4fbb      	SBCI R27,HIGH(-_data)
0000a6 b1ec      	IN   R30,0xC
0000a7 93ec      	ST   X,R30
                 ; 0000 001F   i++;
0000a8 01f2      	MOVW R30,R4
0000a9 9631      	ADIW R30,1
0000aa 012f      	MOVW R4,R30
                 ; 0000 0020   if(data[i]==data[i-1]){         //etminan az nabood data tekrari
0000ab e0a0      	LDI  R26,LOW(_data)
0000ac e0b5      	LDI  R27,HIGH(_data)
0000ad 0da4      	ADD  R26,R4
0000ae 1db5      	ADC  R27,R5
0000af 91ac      	LD   R26,X
0000b0 9731      	SBIW R30,1
0000b1 50e0      	SUBI R30,LOW(-_data)
0000b2 4ffb      	SBCI R31,HIGH(-_data)
0000b3 81e0      	LD   R30,Z
0000b4 17ea      	CP   R30,R26
0000b5 f419      	BRNE _0x4
                 ; 0000 0021     i--;}
0000b6 01f2      	MOVW R30,R4
0000b7 9731      	SBIW R30,1
0000b8 012f      	MOVW R4,R30
                 ; 0000 0022 
                 ; 0000 0023 
                 ; 0000 0024  if (C==0){
                 _0x4:
0000b9 20bb      	TST  R11
0000ba f009      	BREQ PC+2
0000bb c060      	RJMP _0x5
                 ; 0000 0025         CB=1;
0000bc 9ac0      	SBI  0x18,0
                 ; 0000 0026     if(data[1]=='O'&&data[2]=='K'){
                +
0000bd 91a0 0501+LDS R26 , _data + ( 1 )
                 	__GETB2MN _data,1
0000bf 34af      	CPI  R26,LOW(0x4F)
0000c0 f421      	BRNE _0x9
                +
0000c1 91a0 0502+LDS R26 , _data + ( 2 )
                 	__GETB2MN _data,2
0000c3 34ab      	CPI  R26,LOW(0x4B)
0000c4 f009      	BREQ _0xA
                 _0x9:
0000c5 c047      	RJMP _0x8
                 _0xA:
                 ; 0000 0027          j++;
0000c6 01f3      	MOVW R30,R6
0000c7 9631      	ADIW R30,1
0000c8 013f      	MOVW R6,R30
                 ; 0000 0028         lcd_putchar('O');
0000c9 e4af      	LDI  R26,LOW(79)
0000ca 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 0029 
                 ; 0000 002A          if(j==1){
0000cc 15e6      	CP   R30,R6
0000cd 05f7      	CPC  R31,R7
0000ce f4d1      	BRNE _0xB
                 ; 0000 002B          putchar('A');
0000cf 940e 0336 	CALL SUBOPT_0x1
                 ; 0000 002C          putchar('T');
                 ; 0000 002D          putchar('+');
                 ; 0000 002E          putchar('N');
0000d1 e4ae      	LDI  R26,LOW(78)
0000d2 940e 032a 	CALL _putchar
                 ; 0000 002F          putchar('A');
0000d4 e4a1      	LDI  R26,LOW(65)
0000d5 940e 032a 	CALL _putchar
                 ; 0000 0030          putchar('M');
0000d7 e4ad      	LDI  R26,LOW(77)
0000d8 940e 032a 	CALL _putchar
                 ; 0000 0031          putchar('E');
0000da e4a5      	LDI  R26,LOW(69)
0000db 940e 032a 	CALL _putchar
                 ; 0000 0032          putchar('=');
0000dd e3ad      	LDI  R26,LOW(61)
0000de 940e 032a 	CALL _putchar
                 ; 0000 0033          putchar('H');
0000e0 e4a8      	LDI  R26,LOW(72)
0000e1 940e 032a 	CALL _putchar
                 ; 0000 0034          putchar('G');
0000e3 e4a7      	LDI  R26,LOW(71)
0000e4 940e 032a 	CALL _putchar
                 ; 0000 0035          putchar('H');
0000e6 e4a8      	LDI  R26,LOW(72)
0000e7 940e 033f 	CALL SUBOPT_0x2
                 ; 0000 0036          putchar('\r');
                 ; 0000 0037          putchar('\n');
                 ; 0000 0038            }
                 ; 0000 0039        if(j==2){
                 _0xB:
0000e9 e0e2      	LDI  R30,LOW(2)
0000ea e0f0      	LDI  R31,HIGH(2)
0000eb 15e6      	CP   R30,R6
0000ec 05f7      	CPC  R31,R7
0000ed f4e1      	BRNE _0xC
                 ; 0000 003A          putchar('A');
0000ee 940e 0336 	CALL SUBOPT_0x1
                 ; 0000 003B          putchar('T');
                 ; 0000 003C          putchar('+');
                 ; 0000 003D          putchar('P');
0000f0 e5a0      	LDI  R26,LOW(80)
0000f1 940e 032a 	CALL _putchar
                 ; 0000 003E          putchar('S');
0000f3 e5a3      	LDI  R26,LOW(83)
0000f4 940e 032a 	CALL _putchar
                 ; 0000 003F          putchar('W');
0000f6 e5a7      	LDI  R26,LOW(87)
0000f7 940e 032a 	CALL _putchar
                 ; 0000 0040          putchar('D');
0000f9 e4a4      	LDI  R26,LOW(68)
0000fa 940e 032a 	CALL _putchar
                 ; 0000 0041          putchar('=');
0000fc e3ad      	LDI  R26,LOW(61)
0000fd 940e 032a 	CALL _putchar
                 ; 0000 0042          putchar('1');
0000ff e3a1      	LDI  R26,LOW(49)
000100 940e 032a 	CALL _putchar
                 ; 0000 0043          putchar('2');
000102 e3a2      	LDI  R26,LOW(50)
000103 940e 032a 	CALL _putchar
                 ; 0000 0044          putchar('3');
000105 e3a3      	LDI  R26,LOW(51)
000106 940e 033f 	CALL SUBOPT_0x2
                 ; 0000 0045          putchar('\r');
                 ; 0000 0046          putchar('\n');
                 ; 0000 0047 
                 ; 0000 0048          C=1;
000108 e0e1      	LDI  R30,LOW(1)
000109 2ebe      	MOV  R11,R30
                 ; 0000 0049          }
                 ; 0000 004A 
                 ; 0000 004B 
                 ; 0000 004C     i=1;}
                 _0xC:
00010a e0e1      	LDI  R30,LOW(1)
00010b e0f0      	LDI  R31,HIGH(1)
00010c 012f      	MOVW R4,R30
                 ; 0000 004D 
                 ; 0000 004E     if(data[1]=='E'||data[1]=='F'){
                 _0x8:
                +
00010d 91a0 0501+LDS R26 , _data + ( 1 )
                 	__GETB2MN _data,1
00010f 34a5      	CPI  R26,LOW(0x45)
000110 f021      	BREQ _0xE
                +
000111 91a0 0501+LDS R26 , _data + ( 1 )
                 	__GETB2MN _data,1
000113 34a6      	CPI  R26,LOW(0x46)
000114 f439      	BRNE _0xD
                 _0xE:
                 ; 0000 004F          C=0;
000115 24bb      	CLR  R11
                 ; 0000 0050          j=0;
000116 2466      	CLR  R6
000117 2477      	CLR  R7
                 ; 0000 0051     lcd_putchar('R');
000118 e5a2      	LDI  R26,LOW(82)
000119 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 0052 
                 ; 0000 0053     i=1;}
00011b 012f      	MOVW R4,R30
                 ; 0000 0054 
                 ; 0000 0055       }
                 _0xD:
                 ; 0000 0056 
                 ; 0000 0057  if (C==1){
                 _0x5:
00011c e0e1      	LDI  R30,LOW(1)
00011d 15eb      	CP   R30,R11
00011e f009      	BREQ PC+2
00011f c0fb      	RJMP _0x10
                 ; 0000 0058       CB=0;
000120 98c0      	CBI  0x18,0
                 ; 0000 0059   if(data[1]=='*'){
                +
000121 91a0 0501+LDS R26 , _data + ( 1 )
                 	__GETB2MN _data,1
000123 32aa      	CPI  R26,LOW(0x2A)
000124 f419      	BRNE _0x13
                 ; 0000 005A     i=1;}
000125 e0e1      	LDI  R30,LOW(1)
000126 e0f0      	LDI  R31,HIGH(1)
000127 012f      	MOVW R4,R30
                 ; 0000 005B 
                 ; 0000 005C   //daryaft kilid 1-9
                 ; 0000 005D    switch(data[1]) {
                 _0x13:
                +
000128 91e0 0501+LDS R30 , _data + ( 1 )
                 	__GETB1MN _data,1
00012a e0f0      	LDI  R31,0
                 ; 0000 005E                 case '1':
00012b 33e1      	CPI  R30,LOW(0x31)
00012c e0a0      	LDI  R26,HIGH(0x31)
00012d 07fa      	CPC  R31,R26
00012e f459      	BRNE _0x17
                 ; 0000 005F                     lcd_putchar('1');
00012f e3a1      	LDI  R26,LOW(49)
000130 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 0060                     i=1;
000132 940e 0347 	CALL SUBOPT_0x3
                 ; 0000 0061                   ME1=0; ME2=1;
                 ; 0000 0062                   SR1=0x00;SL1=0x00;
                 ; 0000 0063                   SR2=V+D;SL2=0x00;
000134 2de9      	MOV  R30,R9
000135 0de8      	ADD  R30,R8
000136 bdea      	OUT  0x2A,R30
000137 e0e0      	LDI  R30,LOW(0)
000138 bfe1      	OUT  0x31,R30
                 ; 0000 0064                 break;
000139 c072      	RJMP _0x16
                 ; 0000 0065                 case '2':
                 _0x17:
00013a 33e2      	CPI  R30,LOW(0x32)
00013b e0a0      	LDI  R26,HIGH(0x32)
00013c 07fa      	CPC  R31,R26
00013d f449      	BRNE _0x1C
                 ; 0000 0066                     lcd_putchar('2');
00013e e3a2      	LDI  R26,LOW(50)
00013f 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 0067                     i=1;
000141 940e 034f 	CALL SUBOPT_0x4
                 ; 0000 0068                   ME1=1; ME2=1;
                 ; 0000 0069                   SR1=V;SL1=0;
                 ; 0000 006A                   SR2=V;SL2=0;
000143 bc8a      	OUT  0x2A,R8
000144 e0e0      	LDI  R30,LOW(0)
000145 bfe1      	OUT  0x31,R30
                 ; 0000 006B                 break;
000146 c065      	RJMP _0x16
                 ; 0000 006C                 case '3':
                 _0x1C:
000147 33e3      	CPI  R30,LOW(0x33)
000148 e0a0      	LDI  R26,HIGH(0x33)
000149 07fa      	CPC  R31,R26
00014a f479      	BRNE _0x21
                 ; 0000 006D                     lcd_putchar('3');
00014b e3a3      	LDI  R26,LOW(51)
00014c 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 006E                     i=1;
00014e 012f      	MOVW R4,R30
                 ; 0000 006F                    ME1=1; ME2=0;
00014f 9ac3      	SBI  0x18,3
000150 98c2      	CBI  0x18,2
                 ; 0000 0070                   SR1=V+D;SL1=0x00;
000151 2de9      	MOV  R30,R9
000152 0de8      	ADD  R30,R8
000153 93e0 0078 	STS  120,R30
000155 e0e0      	LDI  R30,LOW(0)
000156 bde8      	OUT  0x28,R30
                 ; 0000 0071                   SR2=0x00;SL2=0x00;
000157 bdea      	OUT  0x2A,R30
000158 bfe1      	OUT  0x31,R30
                 ; 0000 0072                break;
000159 c052      	RJMP _0x16
                 ; 0000 0073                 case '4':
                 _0x21:
00015a 33e4      	CPI  R30,LOW(0x34)
00015b e0a0      	LDI  R26,HIGH(0x34)
00015c 07fa      	CPC  R31,R26
00015d f449      	BRNE _0x26
                 ; 0000 0074                     lcd_putchar('4');
00015e e3a4      	LDI  R26,LOW(52)
00015f 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 0075                     i=1;
000161 940e 034f 	CALL SUBOPT_0x4
                 ; 0000 0076                   ME1=1; ME2=1;
                 ; 0000 0077                   SR1=V;SL1=0;
                 ; 0000 0078                   SR2=0;SL2=V;
000163 e0e0      	LDI  R30,LOW(0)
000164 bdea      	OUT  0x2A,R30
000165 be81      	OUT  0x31,R8
                 ; 0000 0079                break;
000166 c045      	RJMP _0x16
                 ; 0000 007A                 case '5':
                 _0x26:
000167 33e5      	CPI  R30,LOW(0x35)
000168 e0a0      	LDI  R26,HIGH(0x35)
000169 07fa      	CPC  R31,R26
00016a f429      	BRNE _0x2B
                 ; 0000 007B                     lcd_putchar('5');
00016b e3a5      	LDI  R26,LOW(53)
00016c 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 007C                     i=1;
00016e 012f      	MOVW R4,R30
                 ; 0000 007D                 break;
00016f c03c      	RJMP _0x16
                 ; 0000 007E                case '6':
                 _0x2B:
000170 33e6      	CPI  R30,LOW(0x36)
000171 e0a0      	LDI  R26,HIGH(0x36)
000172 07fa      	CPC  R31,R26
000173 f449      	BRNE _0x2C
                 ; 0000 007F                     lcd_putchar('6');
000174 e3a6      	LDI  R26,LOW(54)
000175 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 0080                     i=1;
000177 940e 0357 	CALL SUBOPT_0x5
                 ; 0000 0081                    ME1=1; ME2=1;
                 ; 0000 0082                   SR1=0;SL1=V;
                 ; 0000 0083                   SR2=V;SL2=0;
000179 bc8a      	OUT  0x2A,R8
00017a e0e0      	LDI  R30,LOW(0)
00017b bfe1      	OUT  0x31,R30
                 ; 0000 0084                break;
00017c c02f      	RJMP _0x16
                 ; 0000 0085                case '7':
                 _0x2C:
00017d 33e7      	CPI  R30,LOW(0x37)
00017e e0a0      	LDI  R26,HIGH(0x37)
00017f 07fa      	CPC  R31,R26
000180 f459      	BRNE _0x31
                 ; 0000 0086                     lcd_putchar('7');
000181 e3a7      	LDI  R26,LOW(55)
000182 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 0087                     i=1;
000184 940e 0347 	CALL SUBOPT_0x3
                 ; 0000 0088                    ME1=0; ME2=1;
                 ; 0000 0089                   SR1=0x00;SL1=0x00;
                 ; 0000 008A                   SR2=0x00;SL2=V+D;
000186 e0e0      	LDI  R30,LOW(0)
000187 bdea      	OUT  0x2A,R30
000188 2de9      	MOV  R30,R9
000189 0de8      	ADD  R30,R8
00018a bfe1      	OUT  0x31,R30
                 ; 0000 008B                break;
00018b c020      	RJMP _0x16
                 ; 0000 008C                case '8':
                 _0x31:
00018c 33e8      	CPI  R30,LOW(0x38)
00018d e0a0      	LDI  R26,HIGH(0x38)
00018e 07fa      	CPC  R31,R26
00018f f449      	BRNE _0x36
                 ; 0000 008D                     lcd_putchar('8');
000190 e3a8      	LDI  R26,LOW(56)
000191 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 008E                     i=1;
000193 940e 0357 	CALL SUBOPT_0x5
                 ; 0000 008F                  ME1=1; ME2=1;
                 ; 0000 0090                   SR1=0;SL1=V;
                 ; 0000 0091                   SR2=0;SL2=V;
000195 e0e0      	LDI  R30,LOW(0)
000196 bdea      	OUT  0x2A,R30
000197 be81      	OUT  0x31,R8
                 ; 0000 0092                 break;
000198 c013      	RJMP _0x16
                 ; 0000 0093                case '9':
                 _0x36:
000199 33e9      	CPI  R30,LOW(0x39)
00019a e0a0      	LDI  R26,HIGH(0x39)
00019b 07fa      	CPC  R31,R26
00019c f479      	BRNE _0x40
                 ; 0000 0094                     lcd_putchar('9');
00019d e3a9      	LDI  R26,LOW(57)
00019e 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 0095                     i=1;
0001a0 012f      	MOVW R4,R30
                 ; 0000 0096                  ME1=1; ME2=0;
0001a1 9ac3      	SBI  0x18,3
0001a2 98c2      	CBI  0x18,2
                 ; 0000 0097                   SR1=0x00;SL1=V+D;
0001a3 e0e0      	LDI  R30,LOW(0)
0001a4 93e0 0078 	STS  120,R30
0001a6 2de9      	MOV  R30,R9
0001a7 0de8      	ADD  R30,R8
0001a8 bde8      	OUT  0x28,R30
                 ; 0000 0098                   SR2=0x00;SL2=0x00;
0001a9 e0e0      	LDI  R30,LOW(0)
0001aa bdea      	OUT  0x2A,R30
0001ab bfe1      	OUT  0x31,R30
                 ; 0000 0099                break;
                 ; 0000 009A               default:
                 _0x40:
                 ; 0000 009B                 break;  }
                 _0x16:
                 ; 0000 009C 
                 ; 0000 009D    switch(data[3]) {                                             //daryaft clid channel
                +
0001ac 91e0 0503+LDS R30 , _data + ( 3 )
                 	__GETB1MN _data,3
0001ae e0f0      	LDI  R31,0
                 ; 0000 009E                 case '+':
0001af 32eb      	CPI  R30,LOW(0x2B)
0001b0 e0a0      	LDI  R26,HIGH(0x2B)
0001b1 07fa      	CPC  R31,R26
0001b2 f489      	BRNE _0x44
                 ; 0000 009F                     lcd_putchar('D');
0001b3 e4a4      	LDI  R26,LOW(68)
0001b4 940e 02e5 	CALL _lcd_putchar
                 ; 0000 00A0                     lcd_putchar('+');
0001b6 e2ab      	LDI  R26,LOW(43)
0001b7 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 00A1                     i=1;data[3]='n' ;
0001b9 012f      	MOVW R4,R30
0001ba e6ee      	LDI  R30,LOW(110)
                +
0001bb 93e0 0503+STS _data + ( 3 ) , R30
                 	__PUTB1MN _data,3
                 ; 0000 00A2                     D++;
0001bd 9493      	INC  R9
                 ; 0000 00A3                    if(D==255)D=254;
0001be efef      	LDI  R30,LOW(255)
0001bf 15e9      	CP   R30,R9
0001c0 f411      	BRNE _0x45
0001c1 efee      	LDI  R30,LOW(254)
0001c2 2e9e      	MOV  R9,R30
                 ; 0000 00A4                 break;
                 _0x45:
0001c3 c012      	RJMP _0x43
                 ; 0000 00A5                 case '-':
                 _0x44:
0001c4 32ed      	CPI  R30,LOW(0x2D)
0001c5 e0a0      	LDI  R26,HIGH(0x2D)
0001c6 07fa      	CPC  R31,R26
0001c7 f471      	BRNE _0x48
                 ; 0000 00A6                     lcd_putchar('c');
0001c8 e6a3      	LDI  R26,LOW(99)
0001c9 d11b      	RCALL _lcd_putchar
                 ; 0000 00A7                     lcd_putchar('-');
0001ca e2ad      	LDI  R26,LOW(45)
0001cb 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 00A8                     i=1;data[3]='n';
0001cd 012f      	MOVW R4,R30
0001ce e6ee      	LDI  R30,LOW(110)
                +
0001cf 93e0 0503+STS _data + ( 3 ) , R30
                 	__PUTB1MN _data,3
                 ; 0000 00A9                     D--;
0001d1 949a      	DEC  R9
                 ; 0000 00AA                     if(D==0) D=1;
0001d2 2099      	TST  R9
0001d3 f411      	BRNE _0x47
0001d4 e0e1      	LDI  R30,LOW(1)
0001d5 2e9e      	MOV  R9,R30
                 ; 0000 00AB                 break;
                 _0x47:
                 ; 0000 00AC               default:
                 _0x48:
                 ; 0000 00AD                 break;  }
                 _0x43:
                 ; 0000 00AE 
                 ; 0000 00AF    switch(data[4]) {                                                     // daryaft clid volom
                +
0001d6 91e0 0504+LDS R30 , _data + ( 4 )
                 	__GETB1MN _data,4
0001d8 e0f0      	LDI  R31,0
                 ; 0000 00B0                 case '+':
0001d9 32eb      	CPI  R30,LOW(0x2B)
0001da e0a0      	LDI  R26,HIGH(0x2B)
0001db 07fa      	CPC  R31,R26
0001dc f471      	BRNE _0x4C
                 ; 0000 00B1                     lcd_putchar('v');
0001dd e7a6      	LDI  R26,LOW(118)
0001de d106      	RCALL _lcd_putchar
                 ; 0000 00B2                     lcd_putchar('+');
0001df e2ab      	LDI  R26,LOW(43)
0001e0 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 00B3                     i=1;data[4]='n';data[3]='n';
0001e2 940e 035f 	CALL SUBOPT_0x6
                 ; 0000 00B4                     V++;
0001e4 9483      	INC  R8
                 ; 0000 00B5                    if(V==255)V=254;
0001e5 efef      	LDI  R30,LOW(255)
0001e6 15e8      	CP   R30,R8
0001e7 f411      	BRNE _0x4D
0001e8 efee      	LDI  R30,LOW(254)
0001e9 2e8e      	MOV  R8,R30
                 ; 0000 00B6                 break;
                 _0x4D:
0001ea c010      	RJMP _0x4B
                 ; 0000 00B7                 case '-':
                 _0x4C:
0001eb 32ed      	CPI  R30,LOW(0x2D)
0001ec e0a0      	LDI  R26,HIGH(0x2D)
0001ed 07fa      	CPC  R31,R26
0001ee f461      	BRNE _0x50
                 ; 0000 00B8                     lcd_putchar('v');
0001ef e7a6      	LDI  R26,LOW(118)
0001f0 d0f4      	RCALL _lcd_putchar
                 ; 0000 00B9                     lcd_putchar('-');
0001f1 e2ad      	LDI  R26,LOW(45)
0001f2 940e 0331 	CALL SUBOPT_0x0
                 ; 0000 00BA                    i=1;data[4]='n';data[3]='n';
0001f4 940e 035f 	CALL SUBOPT_0x6
                 ; 0000 00BB                    V--;
0001f6 948a      	DEC  R8
                 ; 0000 00BC                    if(V==0)V=1;
0001f7 2088      	TST  R8
0001f8 f411      	BRNE _0x4F
0001f9 e0e1      	LDI  R30,LOW(1)
0001fa 2e8e      	MOV  R8,R30
                 ; 0000 00BD               default:
                 _0x4F:
                 _0x50:
                 ; 0000 00BE                 break;  }
                 _0x4B:
                 ; 0000 00BF 
                 ; 0000 00C0 
                 ; 0000 00C1     if(data[1]!='*'||data[4]!='+'||data[4]!='-'||data[3]!='+'||data[3]!='-') delay_ms(100);  //andaki vaghfe baraye nabo ...
                +
0001fb 91a0 0501+LDS R26 , _data + ( 1 )
                 	__GETB2MN _data,1
0001fd 32aa      	CPI  R26,LOW(0x2A)
0001fe f481      	BRNE _0x52
                +
0001ff 91a0 0504+LDS R26 , _data + ( 4 )
                 	__GETB2MN _data,4
000201 32ab      	CPI  R26,LOW(0x2B)
000202 f461      	BRNE _0x52
                +
000203 91a0 0504+LDS R26 , _data + ( 4 )
                 	__GETB2MN _data,4
000205 32ad      	CPI  R26,LOW(0x2D)
000206 f441      	BRNE _0x52
                +
000207 91a0 0503+LDS R26 , _data + ( 3 )
                 	__GETB2MN _data,3
000209 32ab      	CPI  R26,LOW(0x2B)
00020a f421      	BRNE _0x52
                +
00020b 91a0 0503+LDS R26 , _data + ( 3 )
                 	__GETB2MN _data,3
00020d 32ad      	CPI  R26,LOW(0x2D)
00020e f021      	BREQ _0x51
                 _0x52:
00020f e6a4      	LDI  R26,LOW(100)
000210 e0b0      	LDI  R27,0
000211 940e 0374 	CALL _delay_ms
                 ; 0000 00C2 
                 ; 0000 00C3   SR1=0;SR2=0;SL1=0;SL2=0;
                 _0x51:
000213 e0e0      	LDI  R30,LOW(0)
000214 93e0 0078 	STS  120,R30
000216 bdea      	OUT  0x2A,R30
000217 bde8      	OUT  0x28,R30
000218 bfe1      	OUT  0x31,R30
                 ; 0000 00C4   ME1=0;ME2=0;
000219 98c3      	CBI  0x18,3
00021a 98c2      	CBI  0x18,2
                 ; 0000 00C5  }
                 ; 0000 00C6 
                 ; 0000 00C7 }
                 _0x10:
00021b 91e9      	LD   R30,Y+
00021c bfef      	OUT  SREG,R30
00021d 91f9      	LD   R31,Y+
00021e 91e9      	LD   R30,Y+
00021f 91b9      	LD   R27,Y+
000220 91a9      	LD   R26,Y+
000221 9199      	LD   R25,Y+
000222 9189      	LD   R24,Y+
000223 9179      	LD   R23,Y+
000224 9169      	LD   R22,Y+
000225 90f9      	LD   R15,Y+
000226 9019      	LD   R1,Y+
000227 9009      	LD   R0,Y+
000228 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 00C9 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00CA C=0;
000229 24bb      	CLR  R11
                 ; 0000 00CB // Port A initialization
                 ; 0000 00CC DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00022a e0e0      	LDI  R30,LOW(0)
00022b bbea      	OUT  0x1A,R30
                 ; 0000 00CD PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00022c bbeb      	OUT  0x1B,R30
                 ; 0000 00CE // Port B initialization
                 ; 0000 00CF DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00022d efe0      	LDI  R30,LOW(240)
00022e bbe7      	OUT  0x17,R30
                 ; 0000 00D0 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00022f e0e0      	LDI  R30,LOW(0)
000230 bbe8      	OUT  0x18,R30
                 ; 0000 00D1 // Port C initialization
                 ; 0000 00D2 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000231 bbe4      	OUT  0x14,R30
                 ; 0000 00D3 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000232 bbe5      	OUT  0x15,R30
                 ; 0000 00D4 // Port D initialization
                 ; 0000 00D5 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000233 bbe1      	OUT  0x11,R30
                 ; 0000 00D6 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000234 bbe2      	OUT  0x12,R30
                 ; 0000 00D7 // Port E initialization
                 ; 0000 00D8 DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
000235 b9e2      	OUT  0x2,R30
                 ; 0000 00D9 PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
000236 b9e3      	OUT  0x3,R30
                 ; 0000 00DA // Port F initialization
                 ; 0000 00DB DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
000237 93e0 0061 	STS  97,R30
                 ; 0000 00DC PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
000239 93e0 0062 	STS  98,R30
                 ; 0000 00DD // Port G initialization
                 ; 0000 00DE DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
00023b 93e0 0064 	STS  100,R30
                 ; 0000 00DF PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
00023d 93e0 0065 	STS  101,R30
                 ; 0000 00E0 
                 ; 0000 00E1 // Timer/Counter 0 initialization
                 ; 0000 00E2 // Clock source: System Clock
                 ; 0000 00E3 // Clock value: 1000.000 kHz
                 ; 0000 00E4 // Mode: Fast PWM top=0xFF
                 ; 0000 00E5 // OC0 output: Non-Inverted PWM
                 ; 0000 00E6 // Timer Period: 0.256 ms
                 ; 0000 00E7 // Output Pulse(s):
                 ; 0000 00E8 // OC0 Period: 0.256 ms Width: 0.080314 ms
                 ; 0000 00E9 ASSR=0<<AS0;
00023f bfe0      	OUT  0x30,R30
                 ; 0000 00EA TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
000240 e6ea      	LDI  R30,LOW(106)
000241 bfe3      	OUT  0x33,R30
                 ; 0000 00EB TCNT0=0x00;
000242 e0e0      	LDI  R30,LOW(0)
000243 bfe2      	OUT  0x32,R30
                 ; 0000 00EC OCR0=0x00;
000244 bfe1      	OUT  0x31,R30
                 ; 0000 00ED 
                 ; 0000 00EE // Timer/Counter 1 initialization
                 ; 0000 00EF // Clock source: System Clock
                 ; 0000 00F0 // Clock value: 1000.000 kHz
                 ; 0000 00F1 // Mode: Fast PWM top=0x00FF
                 ; 0000 00F2 // OC1A output: Non-Inverted PWM
                 ; 0000 00F3 // OC1B output: Non-Inverted PWM
                 ; 0000 00F4 // OC1C output: Non-Inverted PWM
                 ; 0000 00F5 // Noise Canceler: Off
                 ; 0000 00F6 // Input Capture on Falling Edge
                 ; 0000 00F7 // Timer Period: 0.256 ms
                 ; 0000 00F8 // Output Pulse(s):
                 ; 0000 00F9 // OC1A Period: 0.256 ms Width: 0.080314 ms// OC1B Period: 0.256 ms Width: 0.080314 ms// OC1C Period: 0.256 ms Width:  ...
                 ; 0000 00FA // Timer1 Overflow Interrupt: Off
                 ; 0000 00FB // Input Capture Interrupt: Off
                 ; 0000 00FC // Compare A Match Interrupt: Off
                 ; 0000 00FD // Compare B Match Interrupt: Off
                 ; 0000 00FE // Compare C Match Interrupt: Off
                 ; 0000 00FF TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (1<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (1<<WGM10);
000245 eae9      	LDI  R30,LOW(169)
000246 bdef      	OUT  0x2F,R30
                 ; 0000 0100 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
000247 e0ea      	LDI  R30,LOW(10)
000248 bdee      	OUT  0x2E,R30
                 ; 0000 0101 TCNT1H=0x00;
000249 e0e0      	LDI  R30,LOW(0)
00024a bded      	OUT  0x2D,R30
                 ; 0000 0102 TCNT1L=0x00;
00024b bdec      	OUT  0x2C,R30
                 ; 0000 0103 ICR1H=0x00;
00024c bde7      	OUT  0x27,R30
                 ; 0000 0104 ICR1L=0x00;
00024d bde6      	OUT  0x26,R30
                 ; 0000 0105 OCR1AH=0x00;
00024e bdeb      	OUT  0x2B,R30
                 ; 0000 0106 OCR1AL=0x00;
00024f bdea      	OUT  0x2A,R30
                 ; 0000 0107 OCR1BH=0x00;
000250 bde9      	OUT  0x29,R30
                 ; 0000 0108 OCR1BL=0x00;
000251 bde8      	OUT  0x28,R30
                 ; 0000 0109 OCR1CH=0x00;
000252 93e0 0079 	STS  121,R30
                 ; 0000 010A OCR1CL=0x00;
000254 93e0 0078 	STS  120,R30
                 ; 0000 010B 
                 ; 0000 010C // Timer/Counter 2 initialization
                 ; 0000 010D // Clock source: System Clock
                 ; 0000 010E // Clock value: Timer2 Stopped
                 ; 0000 010F // Mode: Normal top=0xFF
                 ; 0000 0110 // OC2 output: Disconnected
                 ; 0000 0111 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000256 bde5      	OUT  0x25,R30
                 ; 0000 0112 TCNT2=0x00;
000257 bde4      	OUT  0x24,R30
                 ; 0000 0113 OCR2=0x00;
000258 bde3      	OUT  0x23,R30
                 ; 0000 0114 
                 ; 0000 0115 // Timer/Counter 3 initialization
                 ; 0000 0116 // Clock source: System Clock
                 ; 0000 0117 // Clock value: Timer3 Stopped
                 ; 0000 0118 // Mode: Normal top=0xFFFF
                 ; 0000 0119 // OC3A output: Disconnected
                 ; 0000 011A // OC3B output: Disconnected
                 ; 0000 011B // OC3C output: Disconnected
                 ; 0000 011C // Noise Canceler: Off
                 ; 0000 011D // Input Capture on Falling Edge
                 ; 0000 011E // Timer3 Overflow Interrupt: Off
                 ; 0000 011F // Input Capture Interrupt: Off
                 ; 0000 0120 // Compare A Match Interrupt: Off
                 ; 0000 0121 // Compare B Match Interrupt: Off
                 ; 0000 0122 // Compare C Match Interrupt: Off
                 ; 0000 0123 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
000259 93e0 008b 	STS  139,R30
                 ; 0000 0124 TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
00025b 93e0 008a 	STS  138,R30
                 ; 0000 0125 TCNT3H=0x00;
00025d 93e0 0089 	STS  137,R30
                 ; 0000 0126 TCNT3L=0x00;
00025f 93e0 0088 	STS  136,R30
                 ; 0000 0127 ICR3H=0x00;
000261 93e0 0081 	STS  129,R30
                 ; 0000 0128 ICR3L=0x00;
000263 93e0 0080 	STS  128,R30
                 ; 0000 0129 OCR3AH=0x00;
000265 93e0 0087 	STS  135,R30
                 ; 0000 012A OCR3AL=0x00;
000267 93e0 0086 	STS  134,R30
                 ; 0000 012B OCR3BH=0x00;
000269 93e0 0085 	STS  133,R30
                 ; 0000 012C OCR3BL=0x00;
00026b 93e0 0084 	STS  132,R30
                 ; 0000 012D OCR3CH=0x00;
00026d 93e0 0083 	STS  131,R30
                 ; 0000 012E OCR3CL=0x00;
00026f 93e0 0082 	STS  130,R30
                 ; 0000 012F 
                 ; 0000 0130 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0131 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000271 bfe7      	OUT  0x37,R30
                 ; 0000 0132 ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
000272 93e0 007d 	STS  125,R30
                 ; 0000 0133 
                 ; 0000 0134 // External Interrupt(s) initialization
                 ; 0000 0135 // INT0: Off
                 ; 0000 0136 // INT1: Off
                 ; 0000 0137 // INT2: Off
                 ; 0000 0138 // INT3: Off
                 ; 0000 0139 // INT4: Off
                 ; 0000 013A // INT5: Off
                 ; 0000 013B // INT6: Off
                 ; 0000 013C // INT7: Off
                 ; 0000 013D EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000274 93e0 006a 	STS  106,R30
                 ; 0000 013E EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
000276 bfea      	OUT  0x3A,R30
                 ; 0000 013F EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
000277 bfe9      	OUT  0x39,R30
                 ; 0000 0140 
                 ; 0000 0141 // USART0 initialization
                 ; 0000 0142 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0143 // USART0 Receiver: On
                 ; 0000 0144 // USART0 Transmitter: On
                 ; 0000 0145 // USART0 Mode: Asynchronous
                 ; 0000 0146 // USART0 Baud Rate: 9600
                 ; 0000 0147 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
000278 b9eb      	OUT  0xB,R30
                 ; 0000 0148 UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
000279 e9e8      	LDI  R30,LOW(152)
00027a b9ea      	OUT  0xA,R30
                 ; 0000 0149 UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
00027b e0e6      	LDI  R30,LOW(6)
00027c 93e0 0095 	STS  149,R30
                 ; 0000 014A UBRR0H=0x00;
00027e e0e0      	LDI  R30,LOW(0)
00027f 93e0 0090 	STS  144,R30
                 ; 0000 014B UBRR0L=0x33;
000281 e3e3      	LDI  R30,LOW(51)
000282 b9e9      	OUT  0x9,R30
                 ; 0000 014C 
                 ; 0000 014D // USART1 initialization
                 ; 0000 014E // USART1 disabled
                 ; 0000 014F UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
000283 e0e0      	LDI  R30,LOW(0)
000284 93e0 009a 	STS  154,R30
                 ; 0000 0150 
                 ; 0000 0151 // Analog Comparator initialization
                 ; 0000 0152 // Analog Comparator: Off
                 ; 0000 0153 // The Analog Comparator's positive input is
                 ; 0000 0154 // connected to the AIN0 pin
                 ; 0000 0155 // The Analog Comparator's negative input is
                 ; 0000 0156 // connected to the AIN1 pin
                 ; 0000 0157 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000286 e8e0      	LDI  R30,LOW(128)
000287 b9e8      	OUT  0x8,R30
                 ; 0000 0158 SFIOR=(0<<ACME);
000288 e0e0      	LDI  R30,LOW(0)
000289 bde0      	OUT  0x20,R30
                 ; 0000 0159 
                 ; 0000 015A // ADC initialization
                 ; 0000 015B // ADC disabled
                 ; 0000 015C ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00028a b9e6      	OUT  0x6,R30
                 ; 0000 015D 
                 ; 0000 015E // SPI initialization
                 ; 0000 015F // SPI disabled
                 ; 0000 0160 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00028b b9ed      	OUT  0xD,R30
                 ; 0000 0161 
                 ; 0000 0162 // TWI initialization
                 ; 0000 0163 // TWI disabled
                 ; 0000 0164 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00028c 93e0 0074 	STS  116,R30
                 ; 0000 0165 
                 ; 0000 0166 // Alphanumeric LCD initialization
                 ; 0000 0167 // Connections are specified in the
                 ; 0000 0168 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0169 // RS - PORTA Bit 0
                 ; 0000 016A // RD - PORTA Bit 1
                 ; 0000 016B // EN - PORTA Bit 2
                 ; 0000 016C // D4 - PORTA Bit 4
                 ; 0000 016D // D5 - PORTA Bit 5
                 ; 0000 016E // D6 - PORTA Bit 6
                 ; 0000 016F // D7 - PORTA Bit 7
                 ; 0000 0170 // Characters/line: 20
                 ; 0000 0171 lcd_init(20);
00028e e1a4      	LDI  R26,LOW(20)
00028f d06c      	RCALL _lcd_init
                 ; 0000 0172 
                 ; 0000 0173 // Global enable interrupts
                 ; 0000 0174 
                 ; 0000 0175 while (1)
                 _0x58:
                 ; 0000 0176       {
                 ; 0000 0177         delay_ms(100);
000290 e6a4      	LDI  R26,LOW(100)
000291 e0b0      	LDI  R27,0
000292 940e 0374 	CALL _delay_ms
                 ; 0000 0178 
                 ; 0000 0179 
                 ; 0000 017A        if(C==0){
000294 20bb      	TST  R11
000295 f499      	BRNE _0x5B
                 ; 0000 017B 
                 ; 0000 017C 
                 ; 0000 017D            if(asm==1){
000296 e0e1      	LDI  R30,LOW(1)
000297 15ea      	CP   R30,R10
000298 f451      	BRNE _0x5C
                 ; 0000 017E             delay_ms(500);
000299 efa4      	LDI  R26,LOW(500)
00029a e0b1      	LDI  R27,HIGH(500)
00029b 940e 0374 	CALL _delay_ms
                 ; 0000 017F             #asm("sei")
00029d 9478      	sei
                 ; 0000 0180             delay_ms(400);
00029e e9a0      	LDI  R26,LOW(400)
00029f e0b1      	LDI  R27,HIGH(400)
0002a0 940e 0374 	CALL _delay_ms
                 ; 0000 0181             asm--;}
0002a2 94aa      	DEC  R10
                 ; 0000 0182 
                 ; 0000 0183          putchar('A');
                 _0x5C:
0002a3 e4a1      	LDI  R26,LOW(65)
0002a4 940e 032a 	CALL _putchar
                 ; 0000 0184          putchar('T');
0002a6 e5a4      	LDI  R26,LOW(84)
0002a7 940e 033f 	CALL SUBOPT_0x2
                 ; 0000 0185          putchar('\r');
                 ; 0000 0186          putchar('\n');
                 ; 0000 0187          }
                 ; 0000 0188 
                 ; 0000 0189       }
                 _0x5B:
0002a9 cfe6      	RJMP _0x58
                 ; 0000 018A }
                 _0x5D:
0002aa cfff      	RJMP _0x5D
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0002ab 93aa      	ST   -Y,R26
0002ac b3eb      	IN   R30,0x1B
0002ad 70ef      	ANDI R30,LOW(0xF)
0002ae 2fae      	MOV  R26,R30
0002af 81e8      	LD   R30,Y
0002b0 7fe0      	ANDI R30,LOW(0xF0)
0002b1 2bea      	OR   R30,R26
0002b2 bbeb      	OUT  0x1B,R30
                +
0002b3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002b4 958a     +DEC R24
0002b5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002b6 9ada      	SBI  0x1B,2
                +
0002b7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002b8 958a     +DEC R24
0002b9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002ba 98da      	CBI  0x1B,2
                +
0002bb e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002bc 958a     +DEC R24
0002bd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002be 940c 032f 	JMP  _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002c0 93aa      	ST   -Y,R26
0002c1 81a8      	LD   R26,Y
0002c2 dfe8      	RCALL __lcd_write_nibble_G100
0002c3 81e8          ld    r30,y
0002c4 95e2          swap  r30
0002c5 83e8          st    y,r30
0002c6 81a8      	LD   R26,Y
0002c7 dfe3      	RCALL __lcd_write_nibble_G100
                +
0002c8 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002c9 958a     +DEC R24
0002ca f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002cb c063      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002cc 93aa      	ST   -Y,R26
0002cd 81e8      	LD   R30,Y
0002ce e0f0      	LDI  R31,0
0002cf 5fe8      	SUBI R30,LOW(-__base_y_G100)
0002d0 4ffa      	SBCI R31,HIGH(-__base_y_G100)
0002d1 81e0      	LD   R30,Z
0002d2 81a9      	LDD  R26,Y+1
0002d3 0fae      	ADD  R26,R30
0002d4 dfeb      	RCALL __lcd_write_data
0002d5 80d9      	LDD  R13,Y+1
0002d6 80c8      	LDD  R12,Y+0
0002d7 9622      	ADIW R28,2
0002d8 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002d9 e0a2      	LDI  R26,LOW(2)
0002da 940e 0366 	CALL SUBOPT_0x7
0002dc e0ac      	LDI  R26,LOW(12)
0002dd dfe2      	RCALL __lcd_write_data
0002de e0a1      	LDI  R26,LOW(1)
0002df 940e 0366 	CALL SUBOPT_0x7
0002e1 e0e0      	LDI  R30,LOW(0)
0002e2 2ece      	MOV  R12,R30
0002e3 2ede      	MOV  R13,R30
0002e4 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002e5 93aa      	ST   -Y,R26
0002e6 81a8      	LD   R26,Y
0002e7 30aa      	CPI  R26,LOW(0xA)
0002e8 f021      	BREQ _0x2000005
0002e9 91e0 050c 	LDS  R30,__lcd_maxx
0002eb 16de      	CP   R13,R30
0002ec f048      	BRLO _0x2000004
                 _0x2000005:
0002ed e0e0      	LDI  R30,LOW(0)
0002ee 93ea      	ST   -Y,R30
0002ef 94c3      	INC  R12
0002f0 2dac      	MOV  R26,R12
0002f1 dfda      	RCALL _lcd_gotoxy
0002f2 81a8      	LD   R26,Y
0002f3 30aa      	CPI  R26,LOW(0xA)
0002f4 f409      	BRNE _0x2000007
0002f5 c039      	RJMP _0x2080001
                 _0x2000007:
                 _0x2000004:
0002f6 94d3      	INC  R13
0002f7 9ad8      	SBI  0x1B,0
0002f8 81a8      	LD   R26,Y
0002f9 dfc6      	RCALL __lcd_write_data
0002fa 98d8      	CBI  0x1B,0
0002fb c033      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002fc 93aa      	ST   -Y,R26
0002fd b3ea      	IN   R30,0x1A
0002fe 6fe0      	ORI  R30,LOW(0xF0)
0002ff bbea      	OUT  0x1A,R30
000300 9ad2      	SBI  0x1A,2
000301 9ad0      	SBI  0x1A,0
000302 9ad1      	SBI  0x1A,1
000303 98da      	CBI  0x1B,2
000304 98d8      	CBI  0x1B,0
000305 98d9      	CBI  0x1B,1
000306 81e8      	LD   R30,Y
000307 93e0 050c 	STS  __lcd_maxx,R30
000309 58e0      	SUBI R30,-LOW(128)
                +
00030a 93e0 050a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00030c 81e8      	LD   R30,Y
00030d 54e0      	SUBI R30,-LOW(192)
                +
00030e 93e0 050b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000310 e1a4      	LDI  R26,LOW(20)
000311 e0b0      	LDI  R27,0
000312 940e 0374 	CALL _delay_ms
000314 940e 036c 	CALL SUBOPT_0x8
000316 940e 036c 	CALL SUBOPT_0x8
000318 940e 036c 	CALL SUBOPT_0x8
00031a e2a0      	LDI  R26,LOW(32)
00031b df8f      	RCALL __lcd_write_nibble_G100
                +
00031c ec88     +LDI R24 , LOW ( 200 )
00031d e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00031e 9701     +SBIW R24 , 1
00031f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000320 e2a8      	LDI  R26,LOW(40)
000321 df9e      	RCALL __lcd_write_data
000322 e0a4      	LDI  R26,LOW(4)
000323 df9c      	RCALL __lcd_write_data
000324 e8a5      	LDI  R26,LOW(133)
000325 df9a      	RCALL __lcd_write_data
000326 e0a6      	LDI  R26,LOW(6)
000327 df98      	RCALL __lcd_write_data
000328 dfb0      	RCALL _lcd_clear
000329 c005      	RJMP _0x2080001
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
00032a 93aa      	ST   -Y,R26
                 putchar0:
00032b 9b5d           sbis usr,udre
00032c cffe           rjmp putchar0
00032d 81e8           ld   r30,y
00032e b9ec           out  udr,r30
                 _0x2080001:
00032f 9621      	ADIW R28,1
000330 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _data:
000500           	.BYTE 0x8
                 __base_y_G100:
000508           	.BYTE 0x4
                 __lcd_maxx:
00050c           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x0:
000331 940e 02e5 	CALL _lcd_putchar
000333 e0e1      	LDI  R30,LOW(1)
000334 e0f0      	LDI  R31,HIGH(1)
000335 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1:
000336 e4a1      	LDI  R26,LOW(65)
000337 940e 032a 	CALL _putchar
000339 e5a4      	LDI  R26,LOW(84)
00033a 940e 032a 	CALL _putchar
00033c e2ab      	LDI  R26,LOW(43)
00033d 940c 032a 	JMP  _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
00033f 940e 032a 	CALL _putchar
000341 e0ad      	LDI  R26,LOW(13)
000342 940e 032a 	CALL _putchar
000344 e0aa      	LDI  R26,LOW(10)
000345 940c 032a 	JMP  _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000347 012f      	MOVW R4,R30
000348 98c3      	CBI  0x18,3
000349 9ac2      	SBI  0x18,2
00034a e0e0      	LDI  R30,LOW(0)
00034b 93e0 0078 	STS  120,R30
00034d bde8      	OUT  0x28,R30
00034e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
00034f 012f      	MOVW R4,R30
000350 9ac3      	SBI  0x18,3
000351 9ac2      	SBI  0x18,2
000352 9280 0078 	STS  120,R8
000354 e0e0      	LDI  R30,LOW(0)
000355 bde8      	OUT  0x28,R30
000356 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
000357 012f      	MOVW R4,R30
000358 9ac3      	SBI  0x18,3
000359 9ac2      	SBI  0x18,2
00035a e0e0      	LDI  R30,LOW(0)
00035b 93e0 0078 	STS  120,R30
00035d bc88      	OUT  0x28,R8
00035e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
00035f 012f      	MOVW R4,R30
000360 e6ee      	LDI  R30,LOW(110)
                +
000361 93e0 0504+STS _data + ( 4 ) , R30
                 	__PUTB1MN _data,4
                +
000363 93e0 0503+STS _data + ( 3 ) , R30
                 	__PUTB1MN _data,3
000365 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000366 940e 02c0 	CALL __lcd_write_data
000368 e0a3      	LDI  R26,LOW(3)
000369 e0b0      	LDI  R27,0
00036a 940c 0374 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
00036c e3a0      	LDI  R26,LOW(48)
00036d 940e 02ab 	CALL __lcd_write_nibble_G100
                +
00036f ec88     +LDI R24 , LOW ( 200 )
000370 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000371 9701     +SBIW R24 , 1
000372 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000373 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000374 9610      	adiw r26,0
000375 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000376 ed80     +LDI R24 , LOW ( 0x7D0 )
000377 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000378 9701     +SBIW R24 , 1
000379 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00037a 95a8      	wdr
00037b 9711      	sbiw r26,1
00037c f7c9      	brne __delay_ms0
                 __delay_ms1:
00037d 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega64 register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :  18 r5 :   1 r6 :   5 r7 :   3 
r8 :  16 r9 :  10 r10:   2 r11:   6 r12:   4 r13:   4 r14:   0 r15:   2 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  23 r25:   7 r26: 136 r27:  14 r28:   3 r29:   1 r30: 250 r31:  30 
x  :   5 y  :  47 z  :   9 
Registers used: 26 out of 35 (74.3%)

ATmega64 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   6 
adiw  :   5 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  41 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  62 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   8 cpc   :  15 cpi   :  25 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   4 jmp   :  40 ld    :  26 ldd   :   3 ldi   : 158 
lds   :  14 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  13 movw  :  22 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :  70 pop   :   0 push  :   0 rcall :  16 ret   :  10 
reti  :   1 rjmp  :  21 rol   :   0 ror   :   0 sbc   :   0 sbci  :   3 
sbi   :  13 sbic  :   0 sbis  :   1 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  25 std   :   0 sts   :  38 sub   :   0 subi  :   5 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 43 out of 116 (37.1%)

ATmega64 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006fc   1732     56   1788   65536   2.7%
[.dseg] 0x000100 0x00050d      0     13     13    4096   0.3%
[.eseg] 0x000000 0x000000      0      0      0    2048   0.0%

Assembly complete, 0 errors, 10 warnings
