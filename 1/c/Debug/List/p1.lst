
AVRASM ver. 2.1.30  C:\Users\Administrator\Desktop\Prj\c\Debug\List\p1.asm Thu Jul 05 01:09:39 2018

C:\Users\Administrator\Desktop\Prj\c\Debug\List\p1.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Prj\c\Debug\List\p1.asm(1090): warning: Register r5 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Prj\c\Debug\List\p1.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Prj\c\Debug\List\p1.asm(1092): warning: Register r6 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Prj\c\Debug\List\p1.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Prj\c\Debug\List\p1.asm(1094): warning: Register r8 already defined by the .DEF directive
C:\Users\Administrator\Desktop\Prj\c\Debug\List\p1.asm(1095): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega64
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega64
                 	#pragma AVRPART MEMORY PROG_FLASH 65536
                 	#pragma AVRPART MEMORY EEPROM 2048
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 	.DEF _D=R7
                 	.DEF _V=R6
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0057 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0086 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000046 0001
000047 1050      	.DB  0x1,0x0,0x50,0x10
                 
                 _0x3:
000048 6e6e
000049 6e6e
00004a 6e6e
00004b 6e6e      	.DB  0x6E,0x6E,0x6E,0x6E,0x6E,0x6E,0x6E,0x6E
                 _0x2000003:
00004c c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004d 0004      	.DW  0x04
00004e 0004      	.DW  0x04
00004f 008c      	.DW  __REG_VARS*2
                 
000050 0008      	.DW  0x08
000051 0500      	.DW  _data
000052 0090      	.DW  _0x3*2
                 
000053 0002      	.DW  0x02
000054 0508      	.DW  __base_y_G100
000055 0098      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000056 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000057 94f8      	CLI
000058 27ee      	CLR  R30
000059 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005a e0f1      	LDI  R31,1
00005b bff5      	OUT  MCUCR,R31
00005c bfe5      	OUT  MCUCR,R30
00005d 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00005f e08d      	LDI  R24,(14-2)+1
000060 e0a2      	LDI  R26,2
000061 27bb      	CLR  R27
                 __CLEAR_REG:
000062 93ed      	ST   X+,R30
000063 958a      	DEC  R24
000064 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000065 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000066 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000067 e0a0      	LDI  R26,LOW(__SRAM_START)
000068 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000069 93ed      	ST   X+,R30
00006a 9701      	SBIW R24,1
00006b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006c e9ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006e 9185      	LPM  R24,Z+
00006f 9195      	LPM  R25,Z+
000070 9700      	SBIW R24,0
000071 f061      	BREQ __GLOBAL_INI_END
000072 91a5      	LPM  R26,Z+
000073 91b5      	LPM  R27,Z+
000074 9005      	LPM  R0,Z+
000075 9015      	LPM  R1,Z+
000076 01bf      	MOVW R22,R30
000077 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000078 9005      	LPM  R0,Z+
000079 920d      	ST   X+,R0
00007a 9701      	SBIW R24,1
00007b f7e1      	BRNE __GLOBAL_INI_LOOP
00007c 01fb      	MOVW R30,R22
00007d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007e efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007f bfed      	OUT  SPL,R30
000080 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000081 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000082 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000083 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000084 940c 01ae 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;//HOSSEIN___GHOLAMI 9321043
                 ;
                 ;//LIBRARIS
                 ;#include <mega64.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;
                 ;//DEFENITIONS
                 ;#define ME1 PORTB.3   // EN OF MOTOR 1 (LEFT)
                 ;#define ME2 PORTB.2   //EN OF MOTOR 2 (RIGHT)
                 ;#define SR1 OCR1CL    //SPEED (PWM DUTY CYCLE) OF M1 ROTATING FORWARD
                 ;#define SL1 OCR1BL    //SPEED (PWM DUTY CYCLE) OF M1 ROTATING BACKWARD
                 ;#define SR2 OCR1AL    //SPEED (PWM DUTY CYCLE) OF M2 ROTATING FORWARD
                 ;#define SL2 OCR0      //SPEED (PWM DUTY CYCLE) OF M2 ROTATING BACKWARD
                 ;
                 ; int i=1; // USE AS COUNTER
                 ; char data[]={'n','n','n','n','n','n','n','n'}; // USE AS BUFFER
                 
                 	.DSEG
                 ;  unsigned char D = 0x10;
                 ;  unsigned char V = 0x50;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0016 {  lcd_gotoxy(0,0);
                 
                 	.CSEG
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
000086 920a      	ST   -Y,R0
000087 921a      	ST   -Y,R1
000088 92fa      	ST   -Y,R15
000089 936a      	ST   -Y,R22
00008a 937a      	ST   -Y,R23
00008b 938a      	ST   -Y,R24
00008c 939a      	ST   -Y,R25
00008d 93aa      	ST   -Y,R26
00008e 93ba      	ST   -Y,R27
00008f 93ea      	ST   -Y,R30
000090 93fa      	ST   -Y,R31
000091 b7ef      	IN   R30,SREG
000092 93ea      	ST   -Y,R30
000093 e0e0      	LDI  R30,LOW(0)
000094 93ea      	ST   -Y,R30
000095 e0a0      	LDI  R26,LOW(0)
000096 940e 023b 	CALL _lcd_gotoxy
                 ; 0000 0017    data[i]=UDR0;    //daryaft data
000098 01d2      	MOVW R26,R4
000099 50a0      	SUBI R26,LOW(-_data)
00009a 4fbb      	SBCI R27,HIGH(-_data)
00009b b1ec      	IN   R30,0xC
00009c 93ec      	ST   X,R30
                 ; 0000 0018   i++;
00009d 01f2      	MOVW R30,R4
00009e 9631      	ADIW R30,1
00009f 012f      	MOVW R4,R30
                 ; 0000 0019   if(data[i]==data[i-1]){         //etminan az nabood data tekrari
0000a0 e0a0      	LDI  R26,LOW(_data)
0000a1 e0b5      	LDI  R27,HIGH(_data)
0000a2 0da4      	ADD  R26,R4
0000a3 1db5      	ADC  R27,R5
0000a4 91ac      	LD   R26,X
0000a5 9731      	SBIW R30,1
0000a6 50e0      	SUBI R30,LOW(-_data)
0000a7 4ffb      	SBCI R31,HIGH(-_data)
0000a8 81e0      	LD   R30,Z
0000a9 17ea      	CP   R30,R26
0000aa f419      	BRNE _0x4
                 ; 0000 001A     i--;}
0000ab 01f2      	MOVW R30,R4
0000ac 9731      	SBIW R30,1
0000ad 012f      	MOVW R4,R30
                 ; 0000 001B   if(data[1]=='*'){               //etminan az gerftan data jadid
                 _0x4:
                +
0000ae 91a0 0501+LDS R26 , _data + ( 1 )
                 	__GETB2MN _data,1
0000b0 32aa      	CPI  R26,LOW(0x2A)
0000b1 f419      	BRNE _0x5
                 ; 0000 001C     i=1;}
0000b2 e0e1      	LDI  R30,LOW(1)
0000b3 e0f0      	LDI  R31,HIGH(1)
0000b4 012f      	MOVW R4,R30
                 ; 0000 001D                                                                  //daryaft kilid 1-9
                 ; 0000 001E    switch(data[1]) {
                 _0x5:
                +
0000b5 91e0 0501+LDS R30 , _data + ( 1 )
                 	__GETB1MN _data,1
0000b7 e0f0      	LDI  R31,0
                 ; 0000 001F                 case '1':
0000b8 33e1      	CPI  R30,LOW(0x31)
0000b9 e0a0      	LDI  R26,HIGH(0x31)
0000ba 07fa      	CPC  R31,R26
0000bb f459      	BRNE _0x9
                 ; 0000 0020                     lcd_putchar('1');
0000bc e3a1      	LDI  R26,LOW(49)
0000bd 940e 0291 	CALL SUBOPT_0x0
                 ; 0000 0021                     i=1;
                 ; 0000 0022                   ME1=0; ME2=1;
0000bf 940e 0296 	CALL SUBOPT_0x1
                 ; 0000 0023                   SR1=0x00;SL1=0x00;
                 ; 0000 0024                   SR2=V+D;SL2=0x00;
0000c1 2de7      	MOV  R30,R7
0000c2 0de6      	ADD  R30,R6
0000c3 bdea      	OUT  0x2A,R30
0000c4 e0e0      	LDI  R30,LOW(0)
0000c5 bfe1      	OUT  0x31,R30
                 ; 0000 0025                 break;
0000c6 c06f      	RJMP _0x8
                 ; 0000 0026                 case '2':
                 _0x9:
0000c7 33e2      	CPI  R30,LOW(0x32)
0000c8 e0a0      	LDI  R26,HIGH(0x32)
0000c9 07fa      	CPC  R31,R26
0000ca f449      	BRNE _0xE
                 ; 0000 0027                     lcd_putchar('2');
0000cb e3a2      	LDI  R26,LOW(50)
0000cc 940e 0291 	CALL SUBOPT_0x0
                 ; 0000 0028                     i=1;
                 ; 0000 0029                   ME1=1; ME2=1;
0000ce 940e 029d 	CALL SUBOPT_0x2
                 ; 0000 002A                   SR1=V;SL1=0;
                 ; 0000 002B                   SR2=V;SL2=0;
0000d0 bc6a      	OUT  0x2A,R6
0000d1 e0e0      	LDI  R30,LOW(0)
0000d2 bfe1      	OUT  0x31,R30
                 ; 0000 002C                 break;
0000d3 c062      	RJMP _0x8
                 ; 0000 002D                 case '3':
                 _0xE:
0000d4 33e3      	CPI  R30,LOW(0x33)
0000d5 e0a0      	LDI  R26,HIGH(0x33)
0000d6 07fa      	CPC  R31,R26
0000d7 f471      	BRNE _0x13
                 ; 0000 002E                     lcd_putchar('3');
0000d8 e3a3      	LDI  R26,LOW(51)
0000d9 940e 0291 	CALL SUBOPT_0x0
                 ; 0000 002F                     i=1;
                 ; 0000 0030                    ME1=1; ME2=0;
0000db 9ac3      	SBI  0x18,3
0000dc 98c2      	CBI  0x18,2
                 ; 0000 0031                   SR1=V+D;SL1=0x00;
0000dd 2de7      	MOV  R30,R7
0000de 0de6      	ADD  R30,R6
0000df 93e0 0078 	STS  120,R30
0000e1 e0e0      	LDI  R30,LOW(0)
0000e2 bde8      	OUT  0x28,R30
                 ; 0000 0032                   SR2=0x00;SL2=0x00;
0000e3 bdea      	OUT  0x2A,R30
0000e4 bfe1      	OUT  0x31,R30
                 ; 0000 0033                break;
0000e5 c050      	RJMP _0x8
                 ; 0000 0034                 case '4':
                 _0x13:
0000e6 33e4      	CPI  R30,LOW(0x34)
0000e7 e0a0      	LDI  R26,HIGH(0x34)
0000e8 07fa      	CPC  R31,R26
0000e9 f449      	BRNE _0x18
                 ; 0000 0035                     lcd_putchar('4');
0000ea e3a4      	LDI  R26,LOW(52)
0000eb 940e 0291 	CALL SUBOPT_0x0
                 ; 0000 0036                     i=1;
                 ; 0000 0037                   ME1=1; ME2=1;
0000ed 940e 029d 	CALL SUBOPT_0x2
                 ; 0000 0038                   SR1=V;SL1=0;
                 ; 0000 0039                   SR2=0;SL2=V;
0000ef e0e0      	LDI  R30,LOW(0)
0000f0 bdea      	OUT  0x2A,R30
0000f1 be61      	OUT  0x31,R6
                 ; 0000 003A                break;
0000f2 c043      	RJMP _0x8
                 ; 0000 003B                 case '5':
                 _0x18:
0000f3 33e5      	CPI  R30,LOW(0x35)
0000f4 e0a0      	LDI  R26,HIGH(0x35)
0000f5 07fa      	CPC  R31,R26
0000f6 f421      	BRNE _0x1D
                 ; 0000 003C                     lcd_putchar('5');
0000f7 e3a5      	LDI  R26,LOW(53)
0000f8 940e 0291 	CALL SUBOPT_0x0
                 ; 0000 003D                     i=1;
                 ; 0000 003E                 break;
0000fa c03b      	RJMP _0x8
                 ; 0000 003F                case '6':
                 _0x1D:
0000fb 33e6      	CPI  R30,LOW(0x36)
0000fc e0a0      	LDI  R26,HIGH(0x36)
0000fd 07fa      	CPC  R31,R26
0000fe f449      	BRNE _0x1E
                 ; 0000 0040                     lcd_putchar('6');
0000ff e3a6      	LDI  R26,LOW(54)
000100 940e 0291 	CALL SUBOPT_0x0
                 ; 0000 0041                     i=1;
                 ; 0000 0042                    ME1=1; ME2=1;
000102 940e 02a4 	CALL SUBOPT_0x3
                 ; 0000 0043                   SR1=0;SL1=V;
                 ; 0000 0044                   SR2=V;SL2=0;
000104 bc6a      	OUT  0x2A,R6
000105 e0e0      	LDI  R30,LOW(0)
000106 bfe1      	OUT  0x31,R30
                 ; 0000 0045                break;
000107 c02e      	RJMP _0x8
                 ; 0000 0046                case '7':
                 _0x1E:
000108 33e7      	CPI  R30,LOW(0x37)
000109 e0a0      	LDI  R26,HIGH(0x37)
00010a 07fa      	CPC  R31,R26
00010b f459      	BRNE _0x23
                 ; 0000 0047                     lcd_putchar('7');
00010c e3a7      	LDI  R26,LOW(55)
00010d 940e 0291 	CALL SUBOPT_0x0
                 ; 0000 0048                     i=1;
                 ; 0000 0049                    ME1=0; ME2=1;
00010f 940e 0296 	CALL SUBOPT_0x1
                 ; 0000 004A                   SR1=0x00;SL1=0x00;
                 ; 0000 004B                   SR2=0x00;SL2=V+D;
000111 e0e0      	LDI  R30,LOW(0)
000112 bdea      	OUT  0x2A,R30
000113 2de7      	MOV  R30,R7
000114 0de6      	ADD  R30,R6
000115 bfe1      	OUT  0x31,R30
                 ; 0000 004C                break;
000116 c01f      	RJMP _0x8
                 ; 0000 004D                case '8':
                 _0x23:
000117 33e8      	CPI  R30,LOW(0x38)
000118 e0a0      	LDI  R26,HIGH(0x38)
000119 07fa      	CPC  R31,R26
00011a f449      	BRNE _0x28
                 ; 0000 004E                     lcd_putchar('8');
00011b e3a8      	LDI  R26,LOW(56)
00011c 940e 0291 	CALL SUBOPT_0x0
                 ; 0000 004F                     i=1;
                 ; 0000 0050                  ME1=1; ME2=1;
00011e 940e 02a4 	CALL SUBOPT_0x3
                 ; 0000 0051                   SR1=0;SL1=V;
                 ; 0000 0052                   SR2=0;SL2=V;
000120 e0e0      	LDI  R30,LOW(0)
000121 bdea      	OUT  0x2A,R30
000122 be61      	OUT  0x31,R6
                 ; 0000 0053                 break;
000123 c012      	RJMP _0x8
                 ; 0000 0054                case '9':
                 _0x28:
000124 33e9      	CPI  R30,LOW(0x39)
000125 e0a0      	LDI  R26,HIGH(0x39)
000126 07fa      	CPC  R31,R26
000127 f471      	BRNE _0x32
                 ; 0000 0055                     lcd_putchar('9');
000128 e3a9      	LDI  R26,LOW(57)
000129 940e 0291 	CALL SUBOPT_0x0
                 ; 0000 0056                     i=1;
                 ; 0000 0057                  ME1=1; ME2=0;
00012b 9ac3      	SBI  0x18,3
00012c 98c2      	CBI  0x18,2
                 ; 0000 0058                   SR1=0x00;SL1=V+D;
00012d e0e0      	LDI  R30,LOW(0)
00012e 93e0 0078 	STS  120,R30
000130 2de7      	MOV  R30,R7
000131 0de6      	ADD  R30,R6
000132 bde8      	OUT  0x28,R30
                 ; 0000 0059                   SR2=0x00;SL2=0x00;
000133 e0e0      	LDI  R30,LOW(0)
000134 bdea      	OUT  0x2A,R30
000135 bfe1      	OUT  0x31,R30
                 ; 0000 005A                break;
                 ; 0000 005B               default:
                 _0x32:
                 ; 0000 005C                 break;  }
                 _0x8:
                 ; 0000 005D 
                 ; 0000 005E    switch(data[3]) {                                             //daryaft clid channel
                +
000136 91e0 0503+LDS R30 , _data + ( 3 )
                 	__GETB1MN _data,3
000138 e0f0      	LDI  R31,0
                 ; 0000 005F                 case '+':
000139 32eb      	CPI  R30,LOW(0x2B)
00013a e0a0      	LDI  R26,HIGH(0x2B)
00013b 07fa      	CPC  R31,R26
00013c f479      	BRNE _0x36
                 ; 0000 0060                     lcd_putchar('D');
00013d e4a4      	LDI  R26,LOW(68)
00013e d113      	RCALL _lcd_putchar
                 ; 0000 0061                     lcd_putchar('+');
00013f e2ab      	LDI  R26,LOW(43)
000140 940e 0291 	CALL SUBOPT_0x0
                 ; 0000 0062                     i=1;data[3]='n' ;
000142 e6ee      	LDI  R30,LOW(110)
                +
000143 93e0 0503+STS _data + ( 3 ) , R30
                 	__PUTB1MN _data,3
                 ; 0000 0063                     D++;
000145 9473      	INC  R7
                 ; 0000 0064                    if(D==255)D=254;
000146 efef      	LDI  R30,LOW(255)
000147 15e7      	CP   R30,R7
000148 f411      	BRNE _0x37
000149 efee      	LDI  R30,LOW(254)
00014a 2e7e      	MOV  R7,R30
                 ; 0000 0065                 break;
                 _0x37:
00014b c011      	RJMP _0x35
                 ; 0000 0066                 case '-':
                 _0x36:
00014c 32ed      	CPI  R30,LOW(0x2D)
00014d e0a0      	LDI  R26,HIGH(0x2D)
00014e 07fa      	CPC  R31,R26
00014f f469      	BRNE _0x3A
                 ; 0000 0067                     lcd_putchar('c');
000150 e6a3      	LDI  R26,LOW(99)
000151 d100      	RCALL _lcd_putchar
                 ; 0000 0068                     lcd_putchar('-');
000152 e2ad      	LDI  R26,LOW(45)
000153 940e 0291 	CALL SUBOPT_0x0
                 ; 0000 0069                     i=1;data[3]='n';
000155 e6ee      	LDI  R30,LOW(110)
                +
000156 93e0 0503+STS _data + ( 3 ) , R30
                 	__PUTB1MN _data,3
                 ; 0000 006A                     D--;
000158 947a      	DEC  R7
                 ; 0000 006B                     if(D==0) D=1;
000159 2077      	TST  R7
00015a f411      	BRNE _0x39
00015b e0e1      	LDI  R30,LOW(1)
00015c 2e7e      	MOV  R7,R30
                 ; 0000 006C                 break;
                 _0x39:
                 ; 0000 006D               default:
                 _0x3A:
                 ; 0000 006E                 break;  }
                 _0x35:
                 ; 0000 006F 
                 ; 0000 0070    switch(data[4]) {                                                     // daryaft clid volom
                +
00015d 91e0 0504+LDS R30 , _data + ( 4 )
                 	__GETB1MN _data,4
00015f e0f0      	LDI  R31,0
                 ; 0000 0071                 case '+':
000160 32eb      	CPI  R30,LOW(0x2B)
000161 e0a0      	LDI  R26,HIGH(0x2B)
000162 07fa      	CPC  R31,R26
000163 f469      	BRNE _0x3E
                 ; 0000 0072                     lcd_putchar('v');
000164 e7a6      	LDI  R26,LOW(118)
000165 d0ec      	RCALL _lcd_putchar
                 ; 0000 0073                     lcd_putchar('+');
000166 e2ab      	LDI  R26,LOW(43)
000167 d129      	RCALL SUBOPT_0x0
                 ; 0000 0074                     i=1;data[4]='n';data[3]='n';
000168 940e 02ab 	CALL SUBOPT_0x4
                 ; 0000 0075                     V++;
00016a 9463      	INC  R6
                 ; 0000 0076                    if(V==255)V=254;
00016b efef      	LDI  R30,LOW(255)
00016c 15e6      	CP   R30,R6
00016d f411      	BRNE _0x3F
00016e efee      	LDI  R30,LOW(254)
00016f 2e6e      	MOV  R6,R30
                 ; 0000 0077                 break;
                 _0x3F:
000170 c00f      	RJMP _0x3D
                 ; 0000 0078                 case '-':
                 _0x3E:
000171 32ed      	CPI  R30,LOW(0x2D)
000172 e0a0      	LDI  R26,HIGH(0x2D)
000173 07fa      	CPC  R31,R26
000174 f459      	BRNE _0x42
                 ; 0000 0079                     lcd_putchar('v');
000175 e7a6      	LDI  R26,LOW(118)
000176 d0db      	RCALL _lcd_putchar
                 ; 0000 007A                     lcd_putchar('-');
000177 e2ad      	LDI  R26,LOW(45)
000178 d118      	RCALL SUBOPT_0x0
                 ; 0000 007B                    i=1;data[4]='n';data[3]='n';
000179 940e 02ab 	CALL SUBOPT_0x4
                 ; 0000 007C                    V--;
00017b 946a      	DEC  R6
                 ; 0000 007D                    if(V==0)V=1;
00017c 2066      	TST  R6
00017d f411      	BRNE _0x41
00017e e0e1      	LDI  R30,LOW(1)
00017f 2e6e      	MOV  R6,R30
                 ; 0000 007E               default:
                 _0x41:
                 _0x42:
                 ; 0000 007F                 break;  }
                 _0x3D:
                 ; 0000 0080 
                 ; 0000 0081 
                 ; 0000 0082     if(data[1]!='*'||data[4]!='+'||data[4]!='-'||data[3]!='+'||data[3]!='-') delay_ms(100);  //andaki vaghfe baraye nabo ...
                +
000180 91a0 0501+LDS R26 , _data + ( 1 )
                 	__GETB2MN _data,1
000182 32aa      	CPI  R26,LOW(0x2A)
000183 f481      	BRNE _0x44
                +
000184 91a0 0504+LDS R26 , _data + ( 4 )
                 	__GETB2MN _data,4
000186 32ab      	CPI  R26,LOW(0x2B)
000187 f461      	BRNE _0x44
                +
000188 91a0 0504+LDS R26 , _data + ( 4 )
                 	__GETB2MN _data,4
00018a 32ad      	CPI  R26,LOW(0x2D)
00018b f441      	BRNE _0x44
                +
00018c 91a0 0503+LDS R26 , _data + ( 3 )
                 	__GETB2MN _data,3
00018e 32ab      	CPI  R26,LOW(0x2B)
00018f f421      	BRNE _0x44
                +
000190 91a0 0503+LDS R26 , _data + ( 3 )
                 	__GETB2MN _data,3
000192 32ad      	CPI  R26,LOW(0x2D)
000193 f021      	BREQ _0x43
                 _0x44:
000194 e6a4      	LDI  R26,LOW(100)
000195 e0b0      	LDI  R27,0
000196 940e 02bd 	CALL _delay_ms
                 ; 0000 0083 
                 ; 0000 0084   SR1=0;SR2=0;SL1=0;SL2=0;
                 _0x43:
000198 e0e0      	LDI  R30,LOW(0)
000199 93e0 0078 	STS  120,R30
00019b bdea      	OUT  0x2A,R30
00019c bde8      	OUT  0x28,R30
00019d bfe1      	OUT  0x31,R30
                 ; 0000 0085   ME1=0;ME2=0;
00019e 98c3      	CBI  0x18,3
00019f 98c2      	CBI  0x18,2
                 ; 0000 0086 }
0001a0 91e9      	LD   R30,Y+
0001a1 bfef      	OUT  SREG,R30
0001a2 91f9      	LD   R31,Y+
0001a3 91e9      	LD   R30,Y+
0001a4 91b9      	LD   R27,Y+
0001a5 91a9      	LD   R26,Y+
0001a6 9199      	LD   R25,Y+
0001a7 9189      	LD   R24,Y+
0001a8 9179      	LD   R23,Y+
0001a9 9169      	LD   R22,Y+
0001aa 90f9      	LD   R15,Y+
0001ab 9019      	LD   R1,Y+
0001ac 9009      	LD   R0,Y+
0001ad 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0088 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0089 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0001ae e0e0      	LDI  R30,LOW(0)
0001af bbea      	OUT  0x1A,R30
                 ; 0000 008A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0001b0 bbeb      	OUT  0x1B,R30
                 ; 0000 008B DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
0001b1 efef      	LDI  R30,LOW(255)
0001b2 bbe7      	OUT  0x17,R30
                 ; 0000 008C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0001b3 e0e0      	LDI  R30,LOW(0)
0001b4 bbe8      	OUT  0x18,R30
                 ; 0000 008D DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0001b5 bbe4      	OUT  0x14,R30
                 ; 0000 008E PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0001b6 bbe5      	OUT  0x15,R30
                 ; 0000 008F DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0001b7 bbe1      	OUT  0x11,R30
                 ; 0000 0090 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0001b8 bbe2      	OUT  0x12,R30
                 ; 0000 0091 DDRE=(0<<DDE7) | (0<<DDE6) | (0<<DDE5) | (0<<DDE4) | (0<<DDE3) | (0<<DDE2) | (0<<DDE1) | (0<<DDE0);
0001b9 b9e2      	OUT  0x2,R30
                 ; 0000 0092 PORTE=(0<<PORTE7) | (0<<PORTE6) | (0<<PORTE5) | (0<<PORTE4) | (0<<PORTE3) | (0<<PORTE2) | (0<<PORTE1) | (0<<PORTE0);
0001ba b9e3      	OUT  0x3,R30
                 ; 0000 0093 DDRF=(0<<DDF7) | (0<<DDF6) | (0<<DDF5) | (0<<DDF4) | (0<<DDF3) | (0<<DDF2) | (0<<DDF1) | (0<<DDF0);
0001bb 93e0 0061 	STS  97,R30
                 ; 0000 0094 PORTF=(0<<PORTF7) | (0<<PORTF6) | (0<<PORTF5) | (0<<PORTF4) | (0<<PORTF3) | (0<<PORTF2) | (0<<PORTF1) | (0<<PORTF0);
0001bd 93e0 0062 	STS  98,R30
                 ; 0000 0095 DDRG=(0<<DDG4) | (0<<DDG3) | (0<<DDG2) | (0<<DDG1) | (0<<DDG0);
0001bf 93e0 0064 	STS  100,R30
                 ; 0000 0096 PORTG=(0<<PORTG4) | (0<<PORTG3) | (0<<PORTG2) | (0<<PORTG1) | (0<<PORTG0);
0001c1 93e0 0065 	STS  101,R30
                 ; 0000 0097 
                 ; 0000 0098 // Timer/Counter 0 initialization
                 ; 0000 0099 ASSR=0<<AS0;
0001c3 bfe0      	OUT  0x30,R30
                 ; 0000 009A TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (1<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
0001c4 e6ea      	LDI  R30,LOW(106)
0001c5 bfe3      	OUT  0x33,R30
                 ; 0000 009B TCNT0=0x00;
0001c6 e0e0      	LDI  R30,LOW(0)
0001c7 bfe2      	OUT  0x32,R30
                 ; 0000 009C OCR0=0x00;
0001c8 bfe1      	OUT  0x31,R30
                 ; 0000 009D 
                 ; 0000 009E // Timer/Counter 1 initialization
                 ; 0000 009F TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (1<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (1<<WGM10);
0001c9 eae9      	LDI  R30,LOW(169)
0001ca bdef      	OUT  0x2F,R30
                 ; 0000 00A0 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
0001cb e0ea      	LDI  R30,LOW(10)
0001cc bdee      	OUT  0x2E,R30
                 ; 0000 00A1 TCNT1H=0x00;
0001cd e0e0      	LDI  R30,LOW(0)
0001ce bded      	OUT  0x2D,R30
                 ; 0000 00A2 TCNT1L=0x00;
0001cf bdec      	OUT  0x2C,R30
                 ; 0000 00A3 ICR1H=0x00;
0001d0 bde7      	OUT  0x27,R30
                 ; 0000 00A4 ICR1L=0x00;
0001d1 bde6      	OUT  0x26,R30
                 ; 0000 00A5 OCR1AH=0x00;
0001d2 bdeb      	OUT  0x2B,R30
                 ; 0000 00A6 OCR1AL=0x00;
0001d3 bdea      	OUT  0x2A,R30
                 ; 0000 00A7 OCR1BH=0x00;
0001d4 bde9      	OUT  0x29,R30
                 ; 0000 00A8 OCR1BL=0x00;
0001d5 bde8      	OUT  0x28,R30
                 ; 0000 00A9 OCR1CH=0x00;
0001d6 93e0 0079 	STS  121,R30
                 ; 0000 00AA OCR1CL=0x00;
0001d8 93e0 0078 	STS  120,R30
                 ; 0000 00AB 
                 ; 0000 00AC // Timer/Counter 2 initialization
                 ; 0000 00AD // Clock source: System Clock
                 ; 0000 00AE // Clock value: Timer2 Stopped
                 ; 0000 00AF // Mode: Normal top=0xFF
                 ; 0000 00B0 // OC2 output: Disconnected
                 ; 0000 00B1 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0001da bde5      	OUT  0x25,R30
                 ; 0000 00B2 TCNT2=0x00;
0001db bde4      	OUT  0x24,R30
                 ; 0000 00B3 OCR2=0x00;
0001dc bde3      	OUT  0x23,R30
                 ; 0000 00B4 
                 ; 0000 00B5 // Timer/Counter 3 initialization
                 ; 0000 00B6 // Clock source: System Clock
                 ; 0000 00B7 // Clock value: Timer3 Stopped
                 ; 0000 00B8 // Mode: Normal top=0xFFFF
                 ; 0000 00B9 // OC3A output: Disconnected
                 ; 0000 00BA // OC3B output: Disconnected
                 ; 0000 00BB // OC3C output: Disconnected
                 ; 0000 00BC // Noise Canceler: Off
                 ; 0000 00BD // Input Capture on Falling Edge
                 ; 0000 00BE // Timer3 Overflow Interrupt: Off
                 ; 0000 00BF // Input Capture Interrupt: Off
                 ; 0000 00C0 // Compare A Match Interrupt: Off
                 ; 0000 00C1 // Compare B Match Interrupt: Off
                 ; 0000 00C2 // Compare C Match Interrupt: Off
                 ; 0000 00C3 TCCR3A=(0<<COM3A1) | (0<<COM3A0) | (0<<COM3B1) | (0<<COM3B0) | (0<<COM3C1) | (0<<COM3C0) | (0<<WGM31) | (0<<WGM30);
0001dd 93e0 008b 	STS  139,R30
                 ; 0000 00C4 TCCR3B=(0<<ICNC3) | (0<<ICES3) | (0<<WGM33) | (0<<WGM32) | (0<<CS32) | (0<<CS31) | (0<<CS30);
0001df 93e0 008a 	STS  138,R30
                 ; 0000 00C5 TCNT3H=0x00;
0001e1 93e0 0089 	STS  137,R30
                 ; 0000 00C6 TCNT3L=0x00;
0001e3 93e0 0088 	STS  136,R30
                 ; 0000 00C7 ICR3H=0x00;
0001e5 93e0 0081 	STS  129,R30
                 ; 0000 00C8 ICR3L=0x00;
0001e7 93e0 0080 	STS  128,R30
                 ; 0000 00C9 OCR3AH=0x00;
0001e9 93e0 0087 	STS  135,R30
                 ; 0000 00CA OCR3AL=0x00;
0001eb 93e0 0086 	STS  134,R30
                 ; 0000 00CB OCR3BH=0x00;
0001ed 93e0 0085 	STS  133,R30
                 ; 0000 00CC OCR3BL=0x00;
0001ef 93e0 0084 	STS  132,R30
                 ; 0000 00CD OCR3CH=0x00;
0001f1 93e0 0083 	STS  131,R30
                 ; 0000 00CE OCR3CL=0x00;
0001f3 93e0 0082 	STS  130,R30
                 ; 0000 00CF 
                 ; 0000 00D0 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00D1 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0001f5 bfe7      	OUT  0x37,R30
                 ; 0000 00D2 ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
0001f6 93e0 007d 	STS  125,R30
                 ; 0000 00D3 
                 ; 0000 00D4 // External Interrupt(s) initialization
                 ; 0000 00D5 // INT0: Off
                 ; 0000 00D6 // INT1: Off
                 ; 0000 00D7 // INT2: Off
                 ; 0000 00D8 // INT3: Off
                 ; 0000 00D9 // INT4: Off
                 ; 0000 00DA // INT5: Off
                 ; 0000 00DB // INT6: Off
                 ; 0000 00DC // INT7: Off
                 ; 0000 00DD EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0001f8 93e0 006a 	STS  106,R30
                 ; 0000 00DE EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
0001fa bfea      	OUT  0x3A,R30
                 ; 0000 00DF EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (0<<INT1) | (0<<INT0);
0001fb bfe9      	OUT  0x39,R30
                 ; 0000 00E0 
                 ; 0000 00E1 // USART0 initialization
                 ; 0000 00E2 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00E3 // USART0 Receiver: On
                 ; 0000 00E4 // USART0 Transmitter: Off
                 ; 0000 00E5 // USART0 Mode: Asynchronous
                 ; 0000 00E6 // USART0 Baud Rate: 9600
                 ; 0000 00E7 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
0001fc b9eb      	OUT  0xB,R30
                 ; 0000 00E8 UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0001fd e9e0      	LDI  R30,LOW(144)
0001fe b9ea      	OUT  0xA,R30
                 ; 0000 00E9 UCSR0C=(0<<UMSEL0) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
0001ff e0e6      	LDI  R30,LOW(6)
000200 93e0 0095 	STS  149,R30
                 ; 0000 00EA UBRR0H=0x00;
000202 e0e0      	LDI  R30,LOW(0)
000203 93e0 0090 	STS  144,R30
                 ; 0000 00EB UBRR0L=0x33;
000205 e3e3      	LDI  R30,LOW(51)
000206 b9e9      	OUT  0x9,R30
                 ; 0000 00EC 
                 ; 0000 00ED // USART1 initialization
                 ; 0000 00EE // USART1 disabled
                 ; 0000 00EF UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
000207 e0e0      	LDI  R30,LOW(0)
000208 93e0 009a 	STS  154,R30
                 ; 0000 00F0 
                 ; 0000 00F1 // Analog Comparator initialization
                 ; 0000 00F2 // Analog Comparator: Off
                 ; 0000 00F3 // The Analog Comparator's positive input is
                 ; 0000 00F4 // connected to the AIN0 pin
                 ; 0000 00F5 // The Analog Comparator's negative input is
                 ; 0000 00F6 // connected to the AIN1 pin
                 ; 0000 00F7 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00020a e8e0      	LDI  R30,LOW(128)
00020b b9e8      	OUT  0x8,R30
                 ; 0000 00F8 SFIOR=(0<<ACME);
00020c e0e0      	LDI  R30,LOW(0)
00020d bde0      	OUT  0x20,R30
                 ; 0000 00F9 
                 ; 0000 00FA // ADC initialization
                 ; 0000 00FB // ADC disabled
                 ; 0000 00FC ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00020e b9e6      	OUT  0x6,R30
                 ; 0000 00FD 
                 ; 0000 00FE // SPI initialization
                 ; 0000 00FF // SPI disabled
                 ; 0000 0100 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00020f b9ed      	OUT  0xD,R30
                 ; 0000 0101 
                 ; 0000 0102 // TWI initialization
                 ; 0000 0103 // TWI disabled
                 ; 0000 0104 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000210 93e0 0074 	STS  116,R30
                 ; 0000 0105 
                 ; 0000 0106 // Alphanumeric LCD initialization
                 ; 0000 0107 // Connections are specified in the
                 ; 0000 0108 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0109 // RS - PORTA Bit 0
                 ; 0000 010A // RD - PORTA Bit 1
                 ; 0000 010B // EN - PORTA Bit 2
                 ; 0000 010C // D4 - PORTA Bit 4
                 ; 0000 010D // D5 - PORTA Bit 5
                 ; 0000 010E // D6 - PORTA Bit 6
                 ; 0000 010F // D7 - PORTA Bit 7
                 ; 0000 0110 // Characters/line: 8
                 ; 0000 0111 lcd_init(20);
000212 e1a4      	LDI  R26,LOW(20)
000213 d052      	RCALL _lcd_init
                 ; 0000 0112 
                 ; 0000 0113 // Global enable interrupts
                 ; 0000 0114 #asm("sei")
000214 9478      	sei
                 ; 0000 0115 
                 ; 0000 0116 while (1)
                 _0x4A:
                 ; 0000 0117 { delay_ms(100);
000215 e6a4      	LDI  R26,LOW(100)
000216 e0b0      	LDI  R27,0
000217 940e 02bd 	CALL _delay_ms
                 ; 0000 0118   }
000219 cffb      	RJMP _0x4A
                 ; 0000 0119 }
                 _0x4D:
00021a cfff      	RJMP _0x4D
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00021b 93aa      	ST   -Y,R26
00021c b3eb      	IN   R30,0x1B
00021d 70ef      	ANDI R30,LOW(0xF)
00021e 2fae      	MOV  R26,R30
00021f 81e8      	LD   R30,Y
000220 7fe0      	ANDI R30,LOW(0xF0)
000221 2bea      	OR   R30,R26
000222 bbeb      	OUT  0x1B,R30
                +
000223 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000224 958a     +DEC R24
000225 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000226 9ada      	SBI  0x1B,2
                +
000227 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000228 958a     +DEC R24
000229 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00022a 98da      	CBI  0x1B,2
                +
00022b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00022c 958a     +DEC R24
00022d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00022e c060      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00022f 93aa      	ST   -Y,R26
000230 81a8      	LD   R26,Y
000231 dfe9      	RCALL __lcd_write_nibble_G100
000232 81e8          ld    r30,y
000233 95e2          swap  r30
000234 83e8          st    y,r30
000235 81a8      	LD   R26,Y
000236 dfe4      	RCALL __lcd_write_nibble_G100
                +
000237 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000238 958a     +DEC R24
000239 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00023a c054      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00023b 93aa      	ST   -Y,R26
00023c 81e8      	LD   R30,Y
00023d e0f0      	LDI  R31,0
00023e 5fe8      	SUBI R30,LOW(-__base_y_G100)
00023f 4ffa      	SBCI R31,HIGH(-__base_y_G100)
000240 81e0      	LD   R30,Z
000241 81a9      	LDD  R26,Y+1
000242 0fae      	ADD  R26,R30
000243 dfeb      	RCALL __lcd_write_data
000244 8099      	LDD  R9,Y+1
000245 8088      	LDD  R8,Y+0
000246 9622      	ADIW R28,2
000247 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000248 e0a2      	LDI  R26,LOW(2)
000249 d067      	RCALL SUBOPT_0x5
00024a e0ac      	LDI  R26,LOW(12)
00024b dfe3      	RCALL __lcd_write_data
00024c e0a1      	LDI  R26,LOW(1)
00024d d063      	RCALL SUBOPT_0x5
00024e e0e0      	LDI  R30,LOW(0)
00024f 2e8e      	MOV  R8,R30
000250 2e9e      	MOV  R9,R30
000251 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000252 93aa      	ST   -Y,R26
000253 81a8      	LD   R26,Y
000254 30aa      	CPI  R26,LOW(0xA)
000255 f011      	BREQ _0x2000005
000256 149b      	CP   R9,R11
000257 f040      	BRLO _0x2000004
                 _0x2000005:
000258 e0e0      	LDI  R30,LOW(0)
000259 93ea      	ST   -Y,R30
00025a 9483      	INC  R8
00025b 2da8      	MOV  R26,R8
00025c dfde      	RCALL _lcd_gotoxy
00025d 81a8      	LD   R26,Y
00025e 30aa      	CPI  R26,LOW(0xA)
00025f f179      	BREQ _0x2020001
                 _0x2000004:
000260 9493      	INC  R9
000261 9ad8      	SBI  0x1B,0
000262 81a8      	LD   R26,Y
000263 dfcb      	RCALL __lcd_write_data
000264 98d8      	CBI  0x1B,0
000265 c029      	RJMP _0x2020001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000266 93aa      	ST   -Y,R26
000267 b3ea      	IN   R30,0x1A
000268 6fe0      	ORI  R30,LOW(0xF0)
000269 bbea      	OUT  0x1A,R30
00026a 9ad2      	SBI  0x1A,2
00026b 9ad0      	SBI  0x1A,0
00026c 9ad1      	SBI  0x1A,1
00026d 98da      	CBI  0x1B,2
00026e 98d8      	CBI  0x1B,0
00026f 98d9      	CBI  0x1B,1
000270 80b8      	LDD  R11,Y+0
000271 81e8      	LD   R30,Y
000272 58e0      	SUBI R30,-LOW(128)
                +
000273 93e0 050a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000275 81e8      	LD   R30,Y
000276 54e0      	SUBI R30,-LOW(192)
                +
000277 93e0 050b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000279 e1a4      	LDI  R26,LOW(20)
00027a e0b0      	LDI  R27,0
00027b 940e 02bd 	CALL _delay_ms
00027d d038      	RCALL SUBOPT_0x6
00027e d037      	RCALL SUBOPT_0x6
00027f d036      	RCALL SUBOPT_0x6
000280 e2a0      	LDI  R26,LOW(32)
000281 df99      	RCALL __lcd_write_nibble_G100
                +
000282 ec88     +LDI R24 , LOW ( 200 )
000283 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000284 9701     +SBIW R24 , 1
000285 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000286 e2a8      	LDI  R26,LOW(40)
000287 dfa7      	RCALL __lcd_write_data
000288 e0a4      	LDI  R26,LOW(4)
000289 dfa5      	RCALL __lcd_write_data
00028a e8a5      	LDI  R26,LOW(133)
00028b dfa3      	RCALL __lcd_write_data
00028c e0a6      	LDI  R26,LOW(6)
00028d dfa1      	RCALL __lcd_write_data
00028e dfb9      	RCALL _lcd_clear
                 _0x2020001:
00028f 9621      	ADIW R28,1
000290 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _data:
000500           	.BYTE 0x8
                 __base_y_G100:
000508           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x0:
000291 dfc0      	RCALL _lcd_putchar
000292 e0e1      	LDI  R30,LOW(1)
000293 e0f0      	LDI  R31,HIGH(1)
000294 012f      	MOVW R4,R30
000295 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000296 98c3      	CBI  0x18,3
000297 9ac2      	SBI  0x18,2
000298 e0e0      	LDI  R30,LOW(0)
000299 93e0 0078 	STS  120,R30
00029b bde8      	OUT  0x28,R30
00029c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00029d 9ac3      	SBI  0x18,3
00029e 9ac2      	SBI  0x18,2
00029f 9260 0078 	STS  120,R6
0002a1 e0e0      	LDI  R30,LOW(0)
0002a2 bde8      	OUT  0x28,R30
0002a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0002a4 9ac3      	SBI  0x18,3
0002a5 9ac2      	SBI  0x18,2
0002a6 e0e0      	LDI  R30,LOW(0)
0002a7 93e0 0078 	STS  120,R30
0002a9 bc68      	OUT  0x28,R6
0002aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0002ab e6ee      	LDI  R30,LOW(110)
                +
0002ac 93e0 0504+STS _data + ( 4 ) , R30
                 	__PUTB1MN _data,4
                +
0002ae 93e0 0503+STS _data + ( 3 ) , R30
                 	__PUTB1MN _data,3
0002b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0002b1 df7d      	RCALL __lcd_write_data
0002b2 e0a3      	LDI  R26,LOW(3)
0002b3 e0b0      	LDI  R27,0
0002b4 940c 02bd 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
0002b6 e3a0      	LDI  R26,LOW(48)
0002b7 df63      	RCALL __lcd_write_nibble_G100
                +
0002b8 ec88     +LDI R24 , LOW ( 200 )
0002b9 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002ba 9701     +SBIW R24 , 1
0002bb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002bc 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002bd 9610      	adiw r26,0
0002be f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002bf ed80     +LDI R24 , LOW ( 0x7D0 )
0002c0 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002c1 9701     +SBIW R24 , 1
0002c2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002c3 95a8      	wdr
0002c4 9711      	sbiw r26,1
0002c5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002c6 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega64 register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :   8 r5 :   1 r6 :  16 r7 :  10 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  23 r25:   7 r26: 100 r27:  12 r28:   3 r29:   1 r30: 222 r31:  26 
x  :   5 y  :  46 z  :   9 
Registers used: 23 out of 35 (65.7%)

ATmega64 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   6 
adiw  :   4 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  34 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  23 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :  13 cpi   :  21 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   4 jmp   :  37 ld    :  25 ldd   :   4 ldi   : 122 
lds   :   9 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  12 movw  :  10 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :  69 pop   :   0 push  :   0 rcall :  27 ret   :  10 
reti  :   1 rjmp  :  16 rol   :   0 ror   :   0 sbc   :   0 sbci  :   3 
sbi   :  12 sbic  :   0 sbis  :   0 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  24 std   :   0 sts   :  37 sub   :   0 subi  :   5 swap  :   1 
tst   :   2 wdr   :   1 
Instructions used: 42 out of 116 (36.2%)

ATmega64 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00058e   1388     34   1422   65536   2.2%
[.dseg] 0x000100 0x00050c      0     12     12    4096   0.3%
[.eseg] 0x000000 0x000000      0      0      0    2048   0.0%

Assembly complete, 0 errors, 7 warnings
